const handleCsvUpload = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const csv = e.target.result;
        const lines = csv.split('\n');
        const newItems = [];
        
        // Skip header row if it exists
        const startIndex = lines[0].toLowerCase().includes('item') ? 1 : 0;
        
        for (let i = startIndex; i < lines.length; i++) {
          const line = lines[i].trim();
          if (!line) continue;
          
          const columns = line.split(',').map(col => col.trim().replace(/"/g, ''));
          if (columns.length >= 4) {
            const [item, priority, category, purchased] = columns;
            
            // Validate priority is 1-5
            const priorityNum = parseInt(priority);
            if (priorityNum >= 1 && priorityNum <= 5 && categories.includes(category)) {
              newItems.push({
                id: Date.now() + i,
                item: item,
                priority: priorityNum,
                category: category,
                purchased: purchased.toLowerCase() === 'true' || purchased === '1'
              });
            }
          }
        }
        
        if (newItems.length > 0) {
          setItems(newItems);
          alert(`Successfully imported ${newItems.length} items from CSV`);
        } else {
          alert('No valid items found in CSV. Please check format:\nItem,Priority(1-5),Category,Purchased(true/false)');
        }
      } catch (error) {
        alert('Error reading CSV file. Please check the format.');
      }
    };
    reader.readAsText(file);
    event.target.value = ''; // Reset file input
  };

  const downloadCsv = () => {
    const headers = ['Item', 'Priority', 'Category', 'Purchased'];
    const csvContent = [
      headers.join(','),
      ...items.map(item => [
        `"${item.item}"`,
        item.priority,
        item.category,
        item.purchased
      ].join(','))
    ].join('\n');
    
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'shopping-list.csv';
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const clearAllData = () => {
    if (confirm('Are you sure you want to clear all items? This cannot be undone.')) {
      setItems([]);
      localStorage.removeItem('shoppingListItems');
      localStorage.removeItem('shoppingListFilters');
    }
  };import React, { useState, useMemo, useEffect } from 'react';
import { Plus, Filter, SortAsc, SortDesc, Upload, Download } from 'lucide-react';

const ShoppingListApp = () => {
  // Load data from localStorage on startup
  const [items, setItems] = useState(() => {
    const saved = localStorage.getItem('shoppingListItems');
    return saved ? JSON.parse(saved) : [
      { id: 1, item: 'Milk', priority: 4, category: 'fridge', purchased: false },
      { id: 2, item: 'Bread', priority: 3, category: 'long expiration', purchased: false },
      { id: 3, item: 'Ice Cream', priority: 5, category: 'freezer', purchased: false },
      { id: 4, item: 'T-Shirt', priority: 2, category: 'clothes', purchased: false },
      { id: 5, item: 'Chicken Breast', priority: 4, category: 'freezer', purchased: false },
      { id: 6, item: 'Pasta', priority: 3, category: 'long expiration', purchased: false },
    ];
  });

  // Save to localStorage whenever items change
  useEffect(() => {
    localStorage.setItem('shoppingListItems', JSON.stringify(items));
  }, [items]);

  const [newItem, setNewItem] = useState({ item: '', priority: 3, category: 'fridge' });
  const [filters, setFilters] = useState(() => {
    const saved = localStorage.getItem('shoppingListFilters');
    return saved ? JSON.parse(saved) : {
      priority: [],
      category: '',
      hidePurchased: true
    };
  });

  // Save filters to localStorage
  useEffect(() => {
    localStorage.setItem('shoppingListFilters', JSON.stringify(filters));
  }, [filters]);
  const [sortConfig, setSortConfig] = useState({ key: 'priority', direction: 'desc' });

  const categories = ['fridge', 'freezer', 'long expiration', 'clothes'];
  const categoryShortNames = {
    'fridge': 'F',
    'freezer': 'Z',
    'long expiration': 'LE',
    'clothes': 'C'
  };
  const priorities = [1, 2, 3, 4, 5];

  const addItem = () => {
    if (newItem.item.trim()) {
      setItems([...items, {
        id: Date.now(),
        ...newItem,
        purchased: false
      }]);
      setNewItem({ item: '', priority: 3, category: 'fridge' });
    }
  };

  const togglePurchased = (id) => {
    setItems(items.map(item => 
      item.id === id ? { ...item, purchased: !item.purchased } : item
    ));
  };

  const deleteItem = (id) => {
    setItems(items.filter(item => item.id !== id));
  };

  const handleSort = (key) => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };

  const togglePriorityFilter = (priority) => {
    setFilters(prev => ({
      ...prev,
      priority: prev.priority.includes(priority)
        ? prev.priority.filter(p => p !== priority)
        : [...prev.priority, priority]
    }));
  };

  const filteredAndSortedItems = useMemo(() => {
    let filtered = items.filter(item => {
      // Hide purchased items if filter is enabled
      if (filters.hidePurchased && item.purchased) return false;
      
      // Priority filter
      if (filters.priority.length > 0 && !filters.priority.includes(item.priority)) {
        return false;
      }
      
      // Category filter
      if (filters.category && item.category !== filters.category) {
        return false;
      }
      
      return true;
    });

    // Sort
    filtered.sort((a, b) => {
      let aVal = a[sortConfig.key];
      let bVal = b[sortConfig.key];
      
      if (typeof aVal === 'string') {
        aVal = aVal.toLowerCase();
        bVal = bVal.toLowerCase();
      }
      
      if (aVal < bVal) return sortConfig.direction === 'asc' ? -1 : 1;
      if (aVal > bVal) return sortConfig.direction === 'asc' ? 1 : -1;
      return 0;
    });

    return filtered;
  }, [items, filters, sortConfig]);

  const getSortIcon = (columnKey) => {
    if (sortConfig.key !== columnKey) return <SortAsc className="w-4 h-4 text-gray-400" />;
    return sortConfig.direction === 'asc' 
      ? <SortAsc className="w-4 h-4 text-blue-600" />
      : <SortDesc className="w-4 h-4 text-blue-600" />;
  };

  return (
    <div className="min-h-screen bg-gray-50 p-2">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-xl font-bold text-gray-800 mb-3">Smart Shopping List</h1>
        
        {/* Import/Export Section */}
        <div className="bg-white rounded shadow p-3 mb-3">
          <h2 className="text-sm font-semibold mb-2">Import/Export</h2>
          <div className="flex flex-wrap gap-2">
            <label className="bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700 transition-colors cursor-pointer flex items-center gap-1">
              <Upload className="w-3 h-3" />
              Import CSV
              <input
                type="file"
                accept=".csv"
                onChange={handleCsvUpload}
                className="hidden"
              />
            </label>
            <button
              onClick={downloadCsv}
              className="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700 transition-colors flex items-center gap-1"
            >
              <Download className="w-3 h-3" />
              Export CSV
            </button>
            <button
              onClick={clearAllData}
              className="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700 transition-colors"
            >
              Clear All
            </button>
          </div>
          <p className="text-xs text-gray-600 mt-2">
            CSV format: Item,Priority(1-5),Category,Purchased(true/false)
          </p>
        </div>
        
        {/* Add New Item */}
        <div className="bg-white rounded shadow p-3 mb-3">
          <h2 className="text-sm font-semibold mb-2">Add New Item</h2>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-2">
            <input
              type="text"
              placeholder="Item name"
              value={newItem.item}
              onChange={(e) => setNewItem({...newItem, item: e.target.value})}
              className="px-2 py-1 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-transparent"
            />
            <select
              value={newItem.priority}
              onChange={(e) => setNewItem({...newItem, priority: parseInt(e.target.value)})}
              className="px-2 py-1 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-transparent"
            >
              {priorities.map(p => (
                <option key={p} value={p}>Priority {p}</option>
              ))}
            </select>
            <select
              value={newItem.category}
              onChange={(e) => setNewItem({...newItem, category: e.target.value})}
              className="px-2 py-1 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-transparent"
            >
              {categories.map(cat => (
                <option key={cat} value={cat}>{categoryShortNames[cat]} - {cat}</option>
              ))}
            </select>
            <button
              onClick={addItem}
              className="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700 transition-colors flex items-center justify-center gap-1"
            >
              <Plus className="w-3 h-3" />
              Add
            </button>
          </div>
        </div>

        {/* Filters */}
        <div className="bg-white rounded shadow p-3 mb-3">
          <div className="flex items-center gap-1 mb-2">
            <Filter className="w-4 h-4 text-gray-600" />
            <h2 className="text-sm font-semibold">Filters</h2>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
            {/* Priority Filter */}
            <div>
              <label className="block text-xs font-medium text-gray-700 mb-1">Priority</label>
              <div className="flex flex-wrap gap-1">
                {priorities.map(priority => (
                  <button
                    key={priority}
                    onClick={() => togglePriorityFilter(priority)}
                    className={`px-2 py-1 rounded text-xs font-medium transition-colors ${
                      filters.priority.includes(priority)
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    {priority}
                  </button>
                ))}
              </div>
            </div>

            {/* Category Filter */}
            <div>
              <label className="block text-xs font-medium text-gray-700 mb-1">Category</label>
              <select
                value={filters.category}
                onChange={(e) => setFilters({...filters, category: e.target.value})}
                className="w-full px-2 py-1 border border-gray-300 rounded text-xs focus:ring-1 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">All</option>
                {categories.map(cat => (
                  <option key={cat} value={cat}>{categoryShortNames[cat]} - {cat}</option>
                ))}
              </select>
            </div>

            {/* Hide Purchased */}
            <div className="flex items-center pt-4">
              <label className="flex items-center space-x-1 cursor-pointer">
                <input
                  type="checkbox"
                  checked={filters.hidePurchased}
                  onChange={(e) => setFilters({...filters, hidePurchased: e.target.checked})}
                  className="w-3 h-3 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-xs font-medium text-gray-700">Hide purchased</span>
              </label>
            </div>
          </div>

          {/* Clear Filters */}
          <button
            onClick={() => setFilters({ priority: [], category: '', hidePurchased: true })}
            className="mt-2 text-xs text-blue-600 hover:text-blue-800 font-medium"
          >
            Clear filters
          </button>
        </div>

        {/* Table */}
        <div className="bg-white rounded shadow overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full text-xs">
              <thead className="bg-gray-50 border-b border-gray-200">
                <tr>
                  <th 
                    className="px-1 py-1 text-left text-xs font-medium text-gray-700 cursor-pointer hover:bg-gray-100 select-none"
                    onClick={() => handleSort('item')}
                  >
                    <div className="flex items-center gap-1">
                      I
                      {getSortIcon('item')}
                    </div>
                  </th>
                  <th 
                    className="px-1 py-1 text-center text-xs font-medium text-gray-700 cursor-pointer hover:bg-gray-100 select-none w-8"
                    onClick={() => handleSort('priority')}
                  >
                    <div className="flex items-center justify-center gap-1">
                      P
                      {getSortIcon('priority')}
                    </div>
                  </th>
                  <th 
                    className="px-1 py-1 text-center text-xs font-medium text-gray-700 cursor-pointer hover:bg-gray-100 select-none w-8"
                    onClick={() => handleSort('category')}
                  >
                    <div className="flex items-center justify-center gap-1">
                      C
                      {getSortIcon('category')}
                    </div>
                  </th>
                  <th className="px-1 py-1 text-center text-xs font-medium text-gray-700 w-8">
                    ✓
                  </th>

                </tr>
              </thead>
              <tbody className="divide-y divide-gray-100">
                {filteredAndSortedItems.map((item) => (
                  <tr 
                    key={item.id} 
                    className={`hover:bg-gray-50 transition-colors ${
                      item.purchased ? 'opacity-60 bg-gray-50' : ''
                    }`}
                  >
                    <td className="px-1 py-0.5">
                      <span className={`text-xs ${item.purchased ? 'line-through text-gray-500' : 'text-gray-900'}`}>
                        {item.item}
                      </span>
                    </td>
                    <td className="px-1 py-0.5 text-center">
                      <span className={`inline-flex items-center justify-center w-4 h-4 rounded-full text-xs font-bold ${
                        item.priority >= 4 ? 'bg-red-100 text-red-800' :
                        item.priority === 3 ? 'bg-yellow-100 text-yellow-800' :
                        'bg-green-100 text-green-800'
                      }`}>
                        {item.priority}
                      </span>
                    </td>
                    <td className="px-1 py-0.5 text-center">
                      <span className="text-xs text-gray-900 font-medium">{categoryShortNames[item.category]}</span>
                    </td>
                    <td className="px-1 py-0.5 text-center">
                      <input
                        type="checkbox"
                        checked={item.purchased}
                        onChange={() => togglePurchased(item.id)}
                        className="w-3 h-3 text-blue-600 border-gray-300 rounded focus:ring-blue-500 cursor-pointer"
                      />
                    </td>

                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {filteredAndSortedItems.length === 0 && (
            <div className="text-center py-8">
              <p className="text-gray-500 text-sm">No items match your current filters</p>
              <p className="text-gray-400 text-xs mt-1">Try adjusting your filters or add new items</p>
            </div>
          )}
        </div>

        {/* Summary */}
        <div className="mt-3 bg-white rounded shadow p-2">
          <div className="flex justify-between items-center text-xs text-gray-600">
            <span>Total: {items.length}</span>
            <span>Showing: {filteredAndSortedItems.length}</span>
            <span>Purchased: {items.filter(item => item.purchased).length}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ShoppingListApp;